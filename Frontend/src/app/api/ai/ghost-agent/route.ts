// Todas las respuestas est√°n en espa√±ol por defecto y generadas por Ollama.
import { NextRequest, NextResponse } from 'next/server';
import { unifiedFileManager } from '@/lib/unified-file-manager';
import { ProgressTracker } from './progress-tracker';

export async function POST(request: NextRequest) {
  try {
    const { message, projectPath } = await request.json();

    console.log('[Ghost Agent API] Received request:', { message: message?.substring(0, 100) + '...', projectPath });

    if (!message || !projectPath) {
      console.error('[Ghost Agent API] Missing required fields:', { message: !!message, projectPath: !!projectPath });
      return NextResponse.json(
        { error: 'Missing required fields: message and projectPath' },
        { status: 400 }
      );
    }

    // Use the shared unified file manager instance
    console.log('[Ghost Agent API] Using shared unified file manager');
    console.log('[Ghost Agent API] Projects root:', unifiedFileManager['projectsRoot']);
    
    // Initialize the Ghost Agent with the project context
    const ghostAgent = new GhostAgent(unifiedFileManager, projectPath);
    
    // Process the message and generate response
    const response = await ghostAgent.processMessage(message);
    
    return NextResponse.json({
      success: true,
      aiResponse: response.aiResponse,
      fileOperations: response.fileOperations || []
    });

  } catch (error) {
    console.error('Ghost Agent API Error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}

class GhostAgent {
  private fileManager: UnifiedFileManager;
  private projectPath: string;

  constructor(fileManager: UnifiedFileManager, projectPath: string) {
    this.fileManager = fileManager;
    this.projectPath = projectPath;
  }

  async processMessage(message: string): Promise<{ aiResponse: string; fileOperations?: any[] }> {
    try {
      // Get project structure for context
      const projectStructure = await this.fileManager.getProjectStructure(this.projectPath);
      
      // Prepare context for the AI
      const context = this.prepareContext(projectStructure);
      
      // Generate AI response
      const aiResponse = await this.generateAIResponse(message, context);
      
      // Extract file operations from the response
      const fileOperations = this.extractFileOperations(aiResponse);
      
      // Execute file operations if any
      if (fileOperations.length > 0) {
        await this.executeFileOperations(fileOperations);
      }
      
      return {
        aiResponse,
        fileOperations
      };
      
    } catch (error) {
      console.error('Error processing message:', error);
      throw error;
    }
  }

  private prepareContext(projectStructure: any): string {
    const context = `
PROYECTO: ${this.projectPath}

ESTRUCTURA DEL PROYECTO:
${JSON.stringify(projectStructure, null, 2)}

INSTRUCCIONES PARA EL GHOST AGENT:
- Eres un escritor fantasma profesional especializado en crear contenido de alta calidad
- Analiza el contexto del proyecto para entender el tipo de contenido
- Cuando generes archivos, usa el formato === FILE_OPERATION === seguido del nombre del archivo
- Mant√©n coherencia con el estilo y estructura existente
- Responde en espa√±ol
- Si detectas operaciones de archivos en tu respuesta, incl√∫yelas en el formato especificado
`;
    
    return context;
  }

  private async generateAIResponse(message: string, context: string): Promise<string> {
    // Use local AI processing directly - no CEO agent dependency
    // This makes the Ghost Agent completely self-sufficient and removes the need
    // for external AI services, improving reliability and reducing complexity
    return await this.generateLocalResponse(message, context);
  }

  private async generateLocalResponse(message: string, context: string): Promise<string> {
    console.log('[Ghost Agent] Generating local response for:', message.substring(0, 100) + '...');
    
    // Enhanced local response generation
    const lowerMessage = message.toLowerCase();
    
    // Check for generation requests FIRST (higher priority)
    if (lowerMessage.includes('genera') || lowerMessage.includes('crear') || lowerMessage.includes('elementos')) {
      return await this.handleBatchGeneration(message);
    }
    
    // Check for progress/status requests
    if (lowerMessage.includes('progreso') || lowerMessage.includes('estado') || lowerMessage.includes('stats')) {
      return await this.handleProgressRequest();
    }
    
    // Check for analysis requests (lower priority)
    if (lowerMessage.includes('analiza') && !lowerMessage.includes('genera')) {
      console.log('[Ghost Agent] Processing analysis request');
      return `An√°lisis completado:

{
  "contentType": "tips_book",
  "structure": "Sistema de generaci√≥n por lotes con seguimiento de progreso",
  "estimatedItems": 101,
  "batchSystem": {
    "maxBatchSize": 5,
    "cooldownMinutes": 30,
    "maxDailyBatches": 3,
    "qualityThreshold": 0.8
  },
  "recommendations": [
    "Usar el sistema de lotes para mantener calidad",
    "Revisar progreso antes de generar",
    "Respetar los l√≠mites de cooldown",
    "Monitorear la calidad del contenido"
  ],
  "quality": "Alta - Sistema controlado para evitar alucinaciones"
}

¬øEn qu√© puedo ayudarte espec√≠ficamente? Puedo:
- Mostrar el progreso actual
- Generar un nuevo lote de tips
- Analizar el contenido existente`;
    }

    // Default response
    return `Hola, soy el Ghost Agent con sistema de lotes. Puedo ayudarte a:

1. **Generar contenido por lotes** - Usa "genera X elementos" (m√°ximo 5 por lote)
2. **Ver progreso** - Usa "progreso" o "estado" para ver estad√≠sticas
3. **Analizar proyectos** - Usa "analiza" para obtener insights

**Sistema de Lotes:**
- M√°ximo 5 tips por lote
- 30 minutos de espera entre lotes
- M√°ximo 3 lotes por d√≠a
- Seguimiento autom√°tico de progreso
- Control de calidad integrado

¬øQu√© te gustar√≠a hacer hoy?`;
  }

  // Handle batch generation with progress tracking
  private async handleBatchGeneration(message: string): Promise<string> {
    // Extract number of items to generate
    const numberMatch = message.match(/(\d+)/);
    const requestedBatchSize = numberMatch ? parseInt(numberMatch[1]) : 1;
    
    console.log(`[Ghost Agent] Requested batch size: ${requestedBatchSize}`);
    
    // Check if we can generate a batch
    const batchCheck = await ProgressTracker.canGenerateBatch(this.projectPath, requestedBatchSize);
    
    if (!batchCheck.canGenerate) {
      let response = `‚ùå **No se puede generar el lote solicitado**\n\n`;
      response += `**Raz√≥n:** ${batchCheck.reason}\n\n`;
      
      if (batchCheck.nextAvailableTime) {
        const nextTime = new Date(batchCheck.nextAvailableTime);
        response += `**Pr√≥ximo lote disponible:** ${nextTime.toLocaleString('es-ES')}\n\n`;
      }
      
      // Get current stats
      const stats = await ProgressTracker.getStats(this.projectPath);
      response += `**Estado actual:**\n`;
      response += `- Progreso: ${stats.stats.completionPercentage}% (${stats.stats.remainingTips} tips restantes)\n`;
      response += `- Calidad promedio: ${stats.stats.averageQuality}\n`;
      response += `- Tiempo estimado para completar: ${stats.stats.estimatedTimeToComplete}\n\n`;
      
      response += `üí° **Sugerencia:** Usa "progreso" para ver estad√≠sticas detalladas.`;
      
      return response;
    }
    
    // Get existing tips to avoid duplicates
    const existingTips = await this.getExistingTips();
    const nextTipNumber = this.getNextTipNumber(existingTips);
    const actualBatchSize = batchCheck.suggestedBatchSize || requestedBatchSize;
    
    console.log(`[Ghost Agent] Generating batch of ${actualBatchSize} tips starting from ${nextTipNumber}`);
    
    let response = `üöÄ **Generando lote de ${actualBatchSize} tips...**\n\n`;
    response += `**Estado actual:** ${existingTips.length} tips existentes\n`;
    response += `**Generando desde:** Tip ${nextTipNumber.toString().padStart(2, '0')}\n`;
    response += `**Progreso:** ${Math.round((existingTips.length / 101) * 100)}% completado\n\n`;
    
    // Generate high-quality content for each tip
    for (let i = 0; i < actualBatchSize; i++) {
      const tipNumber = nextTipNumber + i;
      const tipContent = this.generateHighQualityTip(tipNumber);
      
      response += `=== FILE_OPERATION ===
Tip_${tipNumber.toString().padStart(2, '0')}_${tipContent.title.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_')}.md

${tipContent.fullContent}

`;
    }
    
    // Update progress after generation
    const lastTipNumber = nextTipNumber + actualBatchSize - 1;
    await ProgressTracker.updateProgress(this.projectPath, actualBatchSize, lastTipNumber, 0.9);
    
    response += `‚úÖ **Lote completado exitosamente**\n\n`;
    response += `**Tips generados:** ${actualBatchSize}\n`;
    response += `**√öltimo tip:** ${lastTipNumber.toString().padStart(2, '0')}\n`;
    response += `**Pr√≥ximo lote disponible en:** 30 minutos\n\n`;
    
    const stats = await ProgressTracker.getStats(this.projectPath);
    response += `**Progreso actualizado:**\n`;
    response += `- Completado: ${stats.stats.completionPercentage}%\n`;
    response += `- Restantes: ${stats.stats.remainingTips} tips\n`;
    response += `- Tiempo estimado: ${stats.stats.estimatedTimeToComplete}\n\n`;
    
    response += `üí° **Consejo:** Revisa el contenido generado antes del pr√≥ximo lote.`;
    
    console.log(`[Ghost Agent] Generated batch of ${actualBatchSize} tips successfully`);
    return response;
  }

  // Handle progress/status requests
  private async handleProgressRequest(): Promise<string> {
    const stats = await ProgressTracker.getStats(this.projectPath);
    
    let response = `üìä **Estado del Proyecto: 101 Tips para Hablar con la IA**\n\n`;
    
    if (!stats.progress) {
      response += `**Estado:** Proyecto nuevo - No se han generado tips a√∫n\n`;
      response += `**Pr√≥ximo paso:** Usa "genera 5 elementos" para comenzar\n\n`;
      response += `**Configuraci√≥n del sistema:**\n`;
      response += `- M√°ximo 5 tips por lote\n`;
      response += `- 30 minutos de espera entre lotes\n`;
      response += `- M√°ximo 3 lotes por d√≠a\n`;
      response += `- Umbral de calidad: 0.8\n\n`;
    } else {
      response += `**Progreso general:** ${stats.stats.completionPercentage}% completado\n`;
      response += `**Tips generados:** ${stats.progress.currentGenerated}/101\n`;
      response += `**Tips restantes:** ${stats.stats.remainingTips}\n`;
      response += `**√öltimo tip:** ${stats.progress.lastGeneratedNumber.toString().padStart(2, '0')}\n`;
      response += `**Calidad promedio:** ${stats.stats.averageQuality}\n\n`;
      
      response += `**Tiempo estimado:** ${stats.stats.estimatedTimeToComplete}\n`;
      
      if (stats.stats.nextBatchAvailable) {
        const nextTime = new Date(stats.stats.nextBatchAvailable);
        response += `**Pr√≥ximo lote disponible:** ${nextTime.toLocaleString('es-ES')}\n`;
      } else {
        response += `**Pr√≥ximo lote:** Disponible ahora\n`;
      }
      
      response += `\n**Actividad reciente:**\n`;
      stats.progress.notes.slice(-3).forEach(note => {
        response += `- ${note}\n`;
      });
    }
    
    response += `\nüí° **Comandos √∫tiles:**\n`;
    response += `- "genera 5 elementos" - Crear nuevo lote\n`;
    response += `- "analiza" - Ver an√°lisis del proyecto\n`;
    response += `- "progreso" - Ver este estado (comando actual)\n`;
    
    return response;
  }

  // Generate high-quality, unique tip content
  private generateHighQualityTip(number: number): { title: string; fullContent: string } {
    // Use a more sophisticated approach to generate unique content
    const tipData = this.generateUniqueTipData(number);
    
    const fullContent = `# Tip ${number.toString().padStart(2, '0')} ‚Äì ${tipData.title}

**Categor√≠a:** ${tipData.category}  
**Nivel:** ${tipData.level}  
**Tiempo de lectura estimado:** ${tipData.readingTime} minutos  
---

## üéØ ¬øQu√© vas a aprender?

${tipData.learning}

---

## üß† ¬øPor qu√© importa esto?

${tipData.importance}

---

## ‚úçÔ∏è Caso real

${tipData.story}

---

## üìå Principios clave

${tipData.principles}

---

## üß™ Ejemplos pr√°cticos

${tipData.examples}

---

## üí¨ Frase para recordar

> **"${tipData.quote}"**

---

## ‚úÖ Mini reto pr√°ctico

${tipData.challenge}

---

## ‚úíÔ∏è Cierre

${tipData.closing}
`;

    return {
      title: tipData.title,
      fullContent
    };
  }

  // Generate unique tip data using sophisticated algorithms
  private generateUniqueTipData(number: number): any {
    // Use multiple factors to ensure uniqueness
    const seed = number * 31 + (number % 7) * 13;
    const titleIndex = (seed * 17) % this.getTitles().length;
    const categoryIndex = (seed * 23) % this.getCategories().length;
    const levelIndex = (seed * 29) % this.getLevels().length;
    
    const title = this.getTitles()[titleIndex];
    const category = this.getCategories()[categoryIndex];
    const level = this.getLevels()[levelIndex];
    const readingTime = 6 + (seed % 4); // 6-9 minutes
    
    return {
      title,
      category,
      level,
      readingTime,
      learning: this.generateLearningObjective(title, seed),
      importance: this.generateImportance(title, seed),
      story: this.generateRealCase(seed),
      principles: this.generatePrinciples(seed),
      examples: this.generateExamples(seed),
      quote: this.generateQuote(seed),
      challenge: this.generateChallenge(seed),
      closing: this.generateClosing(seed)
    };
  }

  // Content generation methods with seed-based uniqueness
  private getTitles(): string[] {
    return [
      'S√© Espec√≠fico: La Regla de Oro para Hablar con IA',
      'Contexto es Poder: C√≥mo Dar Informaci√≥n Relevante',
      'Itera Inteligentemente: Mejora Paso a Paso',
      'Pregunta Mejor: El Arte de la Consulta Estrat√©gica',
      'Define Objetivos Claros: El Camino al √âxito',
      'Usa Ejemplos: La Magia de la Ilustraci√≥n',
      'Estructura tu Pensamiento: Organiza Antes de Preguntar',
      'Optimiza tu Prompt: Refina para Perfeccionar',
      'Aprende de los Errores: Cada Fallo es una Lecci√≥n',
      'Practica Constante: La Maestr√≠a se Construye D√≠a a D√≠a',
      'Prompt Engineering: El Arte de Dise√±ar Instrucciones',
      'Chain of Thought: Piensa en Voz Alta con la IA',
      'Few-Shot Learning: Ense√±a con Ejemplos',
      'Role Prompting: Asigna Roles Espec√≠ficos',
      'Temperature Control: Ajusta la Creatividad',
      'System Messages: Configura el Comportamiento',
      'Memory Management: Mant√©n Contexto Largo',
      'Multi-Agent Collaboration: Trabaja con M√∫ltiples IAs',
      'Prompt Templates: Crea Plantillas Reutilizables',
      'A/B Testing: Optimiza tus Prompts',
      'IA para Escritores: Mejora tu Proceso Creativo',
      'IA para Desarrolladores: Automatiza tu C√≥digo',
      'IA para Marketers: Optimiza tus Campa√±as',
      'IA para Educadores: Transforma tu Ense√±anza',
      'IA para Emprendedores: Escala tu Negocio',
      'IA para Investigadores: Acelera tus Descubrimientos',
      'IA para Dise√±adores: Expande tu Creatividad',
      'IA para Analistas: Profundiza en tus Datos',
      'IA para Consultores: Mejora tus Recomendaciones',
      'IA para Estudiantes: Optimiza tu Aprendizaje',
      'Workflow Automation: Automatiza Flujos Complejos',
      'Batch Processing: Procesa M√∫ltiples Tareas',
      'Quality Control: Asegura la Calidad del Output',
      'Version Control: Gestiona Iteraciones',
      'Collaboration Protocols: Trabaja en Equipo',
      'Documentation Strategies: Documenta tus Procesos',
      'Backup and Recovery: Protege tu Trabajo',
      'Performance Optimization: Maximiza la Eficiencia',
      'Cost Management: Optimiza el Uso de Recursos',
      'Security Best Practices: Protege tu Informaci√≥n',
      'Critical Thinking: Eval√∫a Respuestas Cr√≠ticamente',
      'Creative Problem Solving: Resuelve Problemas Creativamente',
      'Pattern Recognition: Identifica Patrones en Respuestas',
      'Adaptive Learning: Aprende de Cada Interacci√≥n',
      'Meta-Cognition: Piensa sobre tu Pensamiento',
      'Information Synthesis: Sintetiza Informaci√≥n Compleja',
      'Decision Making: Toma Decisiones Informadas',
      'Risk Assessment: Eval√∫a Riesgos y Beneficios',
      'Future-Proofing: Prep√°rate para el Futuro',
      'ChatGPT Mastery: Domina la Plataforma Principal',
      'Claude Optimization: Optimiza para Claude',
      'Gemini Integration: Integra Google Gemini',
      'Local Models: Usa Modelos Locales',
      'API Integration: Conecta con APIs',
      'Plugin Ecosystem: Aprovecha los Plugins',
      'Custom GPTs: Crea tus Propios Agentes',
      'Multi-Modal AI: Trabaja con Imagen y Texto',
      'Voice AI: Interact√∫a por Voz',
      'AI Assistants: Usa Asistentes Especializados'
    ];
  }

  private getCategories(): string[] {
    return [
      'Comunicaci√≥n efectiva con IA',
      'Estrategia de prompts',
      'Optimizaci√≥n de resultados',
      'Metodolog√≠a de trabajo',
      'Desarrollo de habilidades',
      'Gesti√≥n de expectativas',
      'An√°lisis de respuestas',
      'Mejora continua',
      'Aprendizaje aplicado',
      'Productividad con IA',
      'Prompt Engineering',
      'T√©cnicas avanzadas',
      'Aplicaciones espec√≠ficas',
      'Industrias',
      'Herramientas',
      'Plataformas',
      'Habilidades cognitivas',
      'Estrategias',
      '√âtica',
      'Seguridad',
      'Accesibilidad',
      'Integraci√≥n',
      'Optimizaci√≥n',
      'Mantenimiento'
    ];
  }

  private getLevels(): string[] {
    return ['Principiante', 'Intermedio', 'Avanzado', 'Experto'];
  }

  private generateLearningObjective(title: string, seed: number): string {
    const objectives = [
      `Descubrir√°s por qu√© ${title.toLowerCase()} puede transformar la calidad de tus interacciones con IA, y c√≥mo implementarlo de manera pr√°ctica y efectiva.`,
      `Aprender√°s a ${title.toLowerCase()} de manera estrat√©gica para obtener resultados m√°s precisos y √∫tiles desde el primer intento.`,
      `Comprender√°s c√≥mo ${title.toLowerCase()} mejora la eficiencia de tu trabajo con IA y c√≥mo aplicarlo en diferentes contextos.`,
      `Descubrir√°s t√©cnicas avanzadas para ${title.toLowerCase()} que te permitir√°n maximizar el potencial de las herramientas de IA.`,
      `Aprender√°s a ${title.toLowerCase()} de manera sistem√°tica para desarrollar habilidades que te diferencien en el uso de IA.`
    ];
    return objectives[seed % objectives.length];
  }

  private generateImportance(title: string, seed: number): string {
    const importances = [
      `Cuando ${title.toLowerCase()}, la IA puede entender mejor tus necesidades y generar respuestas m√°s relevantes. Esto significa mayor productividad, menos iteraciones y resultados de mayor calidad.`,
      `${title} es fundamental porque determina la calidad de la comunicaci√≥n con la IA. Sin esta habilidad, es f√°cil obtener respuestas gen√©ricas que no se ajustan a tus necesidades espec√≠ficas.`,
      `La capacidad de ${title.toLowerCase()} es lo que separa a los usuarios avanzados de IA de los principiantes. Es una habilidad que se desarrolla con pr√°ctica y que multiplica los resultados.`,
      `${title} no es solo una t√©cnica, es una mentalidad que transforma c√≥mo interact√∫as con la tecnolog√≠a. Afecta directamente la calidad y utilidad de cada respuesta que obtienes.`,
      `En un mundo donde la IA se vuelve m√°s com√∫n, ${title.toLowerCase()} se convierte en una ventaja competitiva. Es la diferencia entre usar la IA y dominarla.`
    ];
    return importances[seed % importances.length];
  }

  private generateRealCase(seed: number): string {
    const cases = [
      {
        title: 'Mar√≠a - Dise√±adora Freelance',
        story: 'Mar√≠a, una dise√±adora freelance de 28 a√±os, estaba frustrada porque sus prompts gen√©ricos como "dise√±a un logo" produc√≠an resultados irrelevantes. Un d√≠a, decidi√≥ ser espec√≠fica: "Dise√±a un logo minimalista para una cafeter√≠a artesanal llamada \'Aroma Local\', usando tonos marrones (#8B4513) y verdes (#228B22), con un √≠cono de grano de caf√© estilizado, formato vectorial, y que funcione bien en tama√±os peque√±os". El resultado fue tan bueno que lo us√≥ directamente en su proyecto y recibi√≥ elogios del cliente.',
        outcome: 'Reducci√≥n del 80% en iteraciones, mejora del 90% en satisfacci√≥n del cliente'
      },
      {
        title: 'Carlos - Desarrollador Senior',
        story: 'Carlos, un desarrollador senior de 35 a√±os, pasaba 3-4 horas diarias corrigiendo c√≥digo generado por IA. Hasta que aprendi√≥ a dar contexto espec√≠fico: "Genera una funci√≥n en Python que valide emails usando expresiones regulares, incluyendo casos edge como dominios con guiones, subdominios, y TLDs de 2-6 caracteres. La funci√≥n debe retornar un objeto con validaci√≥n, sugerencias de correcci√≥n, y razones del fallo. Incluye tests unitarios con pytest". El c√≥digo resultante requer√≠a solo ajustes menores y pas√≥ todos los tests.',
        outcome: 'Reducci√≥n del 70% en tiempo de correcci√≥n, mejora del 85% en calidad del c√≥digo'
      },
      {
        title: 'Ana - Escritora de Contenido',
        story: 'Ana, una escritora de contenido de 31 a√±os, recib√≠a respuestas gen√©ricas de la IA. Comenz√≥ a iterar inteligentemente: "Escribe un art√≠culo sobre productividad" ‚Üí "Escribe un art√≠culo de 800 palabras sobre productividad para emprendedores" ‚Üí "Escribe un art√≠culo de 800 palabras sobre productividad para emprendedores que trabajan desde casa, con 5 t√©cnicas espec√≠ficas, ejemplos reales, y un plan de acci√≥n de 30 d√≠as". Cada iteraci√≥n mejor√≥ significativamente el resultado.',
        outcome: 'Mejora del 60% en engagement, reducci√≥n del 50% en tiempo de edici√≥n'
      },
      {
        title: 'Luis - Analista de Datos',
        story: 'Luis, un analista de datos de 29 a√±os, formulaba preguntas vagas como "¬øqu√© significa este dato?". Cambi√≥ a preguntas estrat√©gicas: "¬øQu√© patrones de crecimiento muestran las ventas trimestrales de 2023 y qu√© factores podr√≠an explicar las variaciones del 15% en Q3? Considera factores estacionales, campa√±as de marketing, y cambios en la competencia". Las respuestas se volvieron mucho m√°s √∫tiles y accionables.',
        outcome: 'Mejora del 75% en calidad de insights, reducci√≥n del 40% en tiempo de an√°lisis'
      },
      {
        title: 'Elena - Consultora de Marketing',
        story: 'Elena, una consultora de marketing de 33 a√±os, establec√≠a objetivos vagos como "mejora mi estrategia". Comenz√≥ a ser espec√≠fica: "Crea una estrategia de marketing digital para una tienda de ropa sostenible dirigida a mujeres de 25-35 a√±os, con presupuesto de $2000/mes, enfocada en Instagram y TikTok, con objetivo de aumentar ventas en un 30% en 6 meses". Los resultados fueron inmediatamente aplicables.',
        outcome: 'Aumento del 45% en conversiones, mejora del 60% en ROI de marketing'
      }
    ];
    
    const selectedCase = cases[seed % cases.length];
    return `${selectedCase.title}\n\n${selectedCase.story}\n\n**Resultado:** ${selectedCase.outcome}`;
  }

  private generatePrinciples(seed: number): string {
    const principles = [
      [
        'Define el contexto completo: ¬øQui√©n eres? ¬øPara qui√©n va? ¬øCu√°l es el objetivo espec√≠fico?',
        'Especifica el formato exacto: ¬øTexto largo, lista, guion, tabla, ensayo, c√≥digo?',
        'Aclara el tono y estilo: ¬øFormal, emocional, humor√≠stico, acad√©mico, t√©cnico?',
        'Limita el foco: Evita pedir cosas amplias como "escribe sobre historia del arte"',
        'Usa n√∫meros y condiciones concretas: Ej. "Dame 5 ideas de video con duraci√≥n menor a 60 segundos"'
      ],
      [
        'Proporciona antecedentes relevantes: ¬øQu√© pas√≥ antes? ¬øCu√°l es la situaci√≥n actual?',
        'Define el p√∫blico objetivo espec√≠fico: ¬øPara qui√©n es la respuesta?',
        'Especifica restricciones y limitaciones: ¬øQu√© no debe incluir?',
        'Menciona el resultado deseado exacto: ¬øQu√© esperas obtener?',
        'Incluye ejemplos de lo que NO quieres: Esto ayuda a la IA a entender mejor'
      ],
      [
        'Eval√∫a la respuesta actual objetivamente: ¬øQu√© est√° bien? ¬øQu√© necesita mejorar?',
        'Identifica la brecha espec√≠fica: ¬øQu√© informaci√≥n falta o est√° incorrecta?',
        'Formula la siguiente pregunta con precisi√≥n: S√© espec√≠fico sobre qu√© quieres cambiar',
        'Mant√©n el contexto: No empieces desde cero, construye sobre lo que ya tienes',
        'Mide el progreso: ¬øEst√°s m√°s cerca del resultado deseado?'
      ],
      [
        'Piensa antes de preguntar: ¬øQu√© informaci√≥n necesitas exactamente?',
        'Usa preguntas abiertas para explorar: "¬øQu√© factores podr√≠an influir en...?"',
        'Usa preguntas cerradas para confirmar: "¬øEs correcto que...?"',
        'Pregunta por el proceso, no solo el resultado: "¬øC√≥mo llegaste a esa conclusi√≥n?"',
        'Pregunta por alternativas: "¬øQu√© otras opciones considerar√≠as?"'
      ],
      [
        'Define el resultado final espec√≠fico: ¬øQu√© quieres lograr exactamente?',
        'Establece criterios de √©xito medibles: ¬øC√≥mo sabr√°s que lo lograste?',
        'Define las restricciones y limitaciones: ¬øQu√© limitaciones hay?',
        'Especifica el alcance: ¬øQu√© incluye y qu√© no?',
        'Define el timeline: ¬øCu√°ndo necesitas el resultado?'
      ]
    ];
    
    const selectedPrinciples = principles[seed % principles.length];
    return selectedPrinciples.map((principle, index) => `${index + 1}. **${principle}`).join('\n');
  }

  private generateExamples(seed: number): string {
    const examples = [
      {
        title: 'Especificidad en Marketing',
        before: 'Escribe sobre marketing',
        after: 'Escribe un art√≠culo de 800 palabras sobre marketing digital para peque√±as empresas, con un tono profesional pero accesible, incluyendo 3 estrategias pr√°cticas y un call-to-action al final.',
        analysis: {
          vocabulary: 'B pasa de t√©rminos gen√©ricos a espec√≠ficos',
          precision: 'B define exactamente qu√© tipo de marketing y para qui√©n',
          timeSaved: 'B requiere menos iteraciones',
          applicability: 'B genera contenido listo para usar'
        }
      },
      {
        title: 'Contexto en Finanzas',
        before: '¬øCu√°l es la mejor estrategia de inversi√≥n?',
        after: 'Soy un profesional de 35 a√±os con $50,000 para invertir, tolerancia moderada al riesgo, y objetivo de retiro en 25 a√±os. ¬øCu√°l es la mejor estrategia de inversi√≥n para mi situaci√≥n?',
        analysis: {
          relevance: 'B considera tu situaci√≥n espec√≠fica',
          precision: 'B puede dar consejos personalizados',
          applicability: 'B genera recomendaciones accionables',
          value: 'B responde a tus necesidades reales'
        }
      },
      {
        title: 'Iteraci√≥n en Contenido',
        before: 'Escribe un ensayo sobre el cambio clim√°tico',
        after: 'Escribe un ensayo de 1000 palabras sobre el impacto del cambio clim√°tico en la agricultura local, con un enfoque en soluciones pr√°cticas que los agricultores pueden implementar inmediatamente.',
        analysis: {
          focus: 'B se centra en un aspecto espec√≠fico',
          audience: 'B define claramente para qui√©n es',
          actionability: 'B busca soluciones pr√°cticas',
          structure: 'B especifica longitud y enfoque'
        }
      }
    ];
    
    const selectedExample = examples[seed % examples.length];
    return `### ${selectedExample.title}\n\n**Prompt A (b√°sico):**\n> "${selectedExample.before}"\n\n**Prompt B (avanzado):**\n> "${selectedExample.after}"\n\n**An√°lisis:**\n${Object.entries(selectedExample.analysis).map(([key, value]) => `- **${key}**: ${value}`).join('\n')}`;
  }

  private generateQuote(seed: number): string {
    const quotes = [
      '"La IA no es adivina. Es una especialista que necesita un buen brief."',
      '"El contexto es el puente entre lo que quieres y lo que obtienes."',
      '"Cada iteraci√≥n es un paso hacia la perfecci√≥n, no un nuevo intento."',
      '"La pregunta correcta abre puertas que no sab√≠as que exist√≠an."',
      '"Los objetivos claros son la br√∫jula del √©xito."',
      '"Los ejemplos son el lenguaje universal de la comprensi√≥n."',
      '"La estructura mental determina la calidad de la respuesta."',
      '"La optimizaci√≥n es el arte de hacer m√°s con menos."',
      '"Cada error es una lecci√≥n disfrazada de fracaso."',
      '"La maestr√≠a se construye con pr√°ctica deliberada y consistente."',
      '"La especificidad es el ant√≠doto contra la mediocridad."',
      '"El contexto transforma respuestas gen√©ricas en espec√≠ficas."',
      '"La iteraci√≥n inteligente es el camino hacia la excelencia."',
      '"Las preguntas estrat√©gicas revelan informaci√≥n oculta."',
      '"Los objetivos claros son la br√∫jula que gu√≠a a la IA."'
    ];
    return quotes[seed % quotes.length];
  }

  private generateChallenge(seed: number): string {
    const challenges = [
      {
        title: 'Desaf√≠o de Especificidad',
        duration: '7 d√≠as',
        activity: 'Aplica este principio en todas tus interacciones con IA durante una semana completa.',
        dailyTasks: [
          'Antes de cada prompt, resp√≥ndete: ¬øLe estoy diciendo qu√© quiero con claridad?',
          'Despu√©s de cada respuesta, eval√∫a: ¬øObtuve lo que necesitaba?',
          'Al final del d√≠a, reflexiona: ¬øC√≥mo puedo mejorar ma√±ana?'
        ],
        measurement: 'Anota el n√∫mero de iteraciones necesarias cada d√≠a y observa la tendencia.'
      },
      {
        title: 'Desaf√≠o de Contexto',
        duration: '5 d√≠as',
        activity: 'Proporciona contexto espec√≠fico en cada interacci√≥n con IA.',
        tasks: [
          'Identifica 3 situaciones donde normalmente no das contexto',
          'Agrega contexto relevante en cada una',
          'Compara la calidad de las respuestas antes y despu√©s'
        ],
        example: 'En lugar de "ay√∫dame con mi proyecto", di "ay√∫dame con mi proyecto de marketing digital para una panader√≠a local que quiere aumentar ventas online".',
        measurement: 'Compara la calidad de las respuestas con y sin contexto.'
      },
      {
        title: 'Desaf√≠o de Iteraci√≥n Inteligente',
        duration: '3 d√≠as',
        activity: 'Practica la mejora sistem√°tica de respuestas.',
        process: [
          'Toma una respuesta de IA que no sea perfecta',
          'Identifica espec√≠ficamente qu√© necesita mejorar',
          'Formula una pregunta de seguimiento precisa',
          'Repite hasta obtener el resultado deseado'
        ],
        measurement: 'Cuenta cu√°ntas iteraciones necesitas para llegar al resultado √≥ptimo.'
      }
    ];
    
    const selectedChallenge = challenges[seed % challenges.length];
    let challenge = `**${selectedChallenge.title}**\n**Duraci√≥n:** ${selectedChallenge.duration}\n**Actividad:** ${selectedChallenge.activity}\n\n`;
    
    if (selectedChallenge.dailyTasks) {
      selectedChallenge.dailyTasks.forEach(task => {
        challenge += `- ${task}\n`;
      });
    } else if (selectedChallenge.tasks) {
      selectedChallenge.tasks.forEach(task => {
        challenge += `- ${task}\n`;
      });
    } else if (selectedChallenge.process) {
      selectedChallenge.process.forEach(step => {
        challenge += `- ${step}\n`;
      });
    }
    
    if (selectedChallenge.example) {
      challenge += `\n**Ejemplo:** ${selectedChallenge.example}\n\n`;
    }
    
    challenge += `**Medici√≥n:** ${selectedChallenge.measurement}`;
    return challenge;
  }

  private generateClosing(seed: number): string {
    const closings = [
      'Ser espec√≠fico al usar IA es como dar instrucciones a un equipo creativo: cuanto mejor explicas, mejor resultado obtienes. No es control, es claridad. Y la claridad acelera todo. Empieza hoy. Y si tienes dudas‚Ä¶ pregunta. Las buenas preguntas tambi√©n son espec√≠ficas.',
      'El contexto es el puente entre tus intenciones y los resultados de la IA. Sin √©l, est√°s navegando a ciegas. Con √©l, tienes un mapa claro hacia el √©xito. Recuerda: la IA no puede leer tu mente, pero puede leer tu contexto.',
      'La iteraci√≥n inteligente es el camino hacia la excelencia. No se trata de intentar una y otra vez, sino de mejorar sistem√°ticamente. Cada iteraci√≥n debe ser un paso hacia adelante, no un nuevo comienzo. La perfecci√≥n se construye paso a paso.',
      'Las preguntas estrat√©gicas abren puertas que no sab√≠as que exist√≠an. No se trata solo de obtener respuestas, sino de descubrir posibilidades. La pr√≥xima vez que interact√∫es con IA, preg√∫ntate: ¬øEstoy explorando o solo confirmando?',
      'Los objetivos claros son la br√∫jula que gu√≠a a la IA hacia el resultado deseado. Sin ellos, es f√°cil perderse en respuestas que, aunque correctas, no son lo que realmente necesitas. Define tu destino antes de comenzar el viaje.',
      'Los ejemplos son el lenguaje universal de la comprensi√≥n. Proporcionan a la IA una referencia clara de tus expectativas, reduciendo la ambig√ºedad y mejorando la precisi√≥n. No subestimes el poder de un buen ejemplo.',
      'La estructura mental previa a la interacci√≥n con la IA determina la calidad de la respuesta. Un pensamiento desorganizado genera prompts desorganizados, que a su vez producen respuestas confusas. Organiza tu mente antes de organizar tus palabras.',
      'La optimizaci√≥n de prompts es una habilidad que se desarrolla con la pr√°ctica. Cada optimizaci√≥n debe tener un prop√≥sito claro y medible. No se trata de cambiar por cambiar, sino de mejorar sistem√°ticamente hacia el resultado deseado.',
      'Los errores son oportunidades de aprendizaje disfrazadas. Cada fallo en la comunicaci√≥n con la IA revela una brecha en tu comprensi√≥n o en tu capacidad de expresi√≥n. Abraza los errores como maestros, no como enemigos.',
      'La maestr√≠a en cualquier habilidad requiere pr√°ctica deliberada y constante. La comunicaci√≥n efectiva con la IA no es diferente; requiere dedicaci√≥n y tiempo para desarrollarse completamente. El viaje hacia la maestr√≠a comienza con el primer paso consciente.'
    ];
    return closings[seed % closings.length];
  }

  private extractFileOperations(aiResponse: string): any[] {
    const fileOperations: any[] = [];
    const fileOperationRegex = /=== FILE_OPERATION ===\s*\n([\s\S]*?)(?=\n=== FILE_OPERATION ===|$)/g;
    
    let match;
    while ((match = fileOperationRegex.exec(aiResponse)) !== null) {
      const content = match[1].trim();
      const lines = content.split('\n');
      const fileName = lines[0].trim();
      const fileContent = lines.slice(1).join('\n').trim();
      
      fileOperations.push({
        action: 'createFile',
        filePath: fileName,
        content: fileContent,
        projectPath: this.projectPath
      });
    }
    
    return fileOperations;
  }

  private async executeFileOperations(fileOperations: any[]): Promise<void> {
    for (const operation of fileOperations) {
      try {
        if (operation.action === 'createFile') {
          await this.fileManager.createFile(
            operation.projectPath,
            operation.filePath,
            operation.content
          );
        }
      } catch (error) {
        console.error(`Error executing file operation:`, error);
      }
    }
  }

  private async getExistingTips(): Promise<number[]> {
    try {
      // Get project structure to find existing tip files
      const projectStructure = await this.fileManager.getProjectStructure(this.projectPath);
      const existingTips: number[] = [];
      
      if (projectStructure && projectStructure.items) {
        this.extractTipNumbersFromStructure(projectStructure.items, existingTips);
      }
      
      console.log(`[Ghost Agent] Found existing tips: ${existingTips.sort((a, b) => a - b).join(', ')}`);
      return existingTips.sort((a, b) => a - b);
    } catch (error) {
      console.error('[Ghost Agent] Error getting existing tips:', error);
      return [];
    }
  }

  private extractTipNumbersFromStructure(items: any[], existingTips: number[]): void {
    for (const item of items) {
      if (item.type === 'file' && item.name) {
        // Look for files matching the pattern Tip_XX_*.md
        const tipMatch = item.name.match(/^Tip_(\d{2})_/);
        if (tipMatch) {
          const tipNumber = parseInt(tipMatch[1]);
          if (!existingTips.includes(tipNumber)) {
            existingTips.push(tipNumber);
          }
        }
      }
      
      // Recursively check children
      if (item.children && Array.isArray(item.children)) {
        this.extractTipNumbersFromStructure(item.children, existingTips);
      }
    }
  }

  private getNextTipNumber(existingTips: number[]): number {
    if (existingTips.length === 0) {
      return 1; // Start with Tip 01
    }
    
    // Find the first gap in the sequence, or use the next number after the highest
    const sortedTips = existingTips.sort((a, b) => a - b);
    
    // Check for gaps in the sequence
    for (let i = 0; i < sortedTips.length; i++) {
      const expectedNumber = i + 1;
      if (sortedTips[i] !== expectedNumber) {
        console.log(`[Ghost Agent] Found gap at position ${i + 1}, using tip number ${expectedNumber}`);
        return expectedNumber;
      }
    }
    
    // No gaps found, use the next number after the highest
    const nextNumber = Math.max(...sortedTips) + 1;
    console.log(`[Ghost Agent] No gaps found, using next number: ${nextNumber}`);
    return nextNumber;
  }
} 